name: Make Bets

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  make-bets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run daily model (build probabilities.csv)
        run: |
          set -e
          mkdir -p data
          # adjust args if your model expects them
          python src/model.py

      - name: Ensure sports list exists (download if missing)
        env:
          API_KEY: ${{ secrets.ODDS_API_KEY }}
        run: |
          set -euo pipefail
          if [ ! -s data/sports.json ]; then
            if [ -z "${API_KEY:-}" ]; then
              echo "sports.json missing and ODDS_API_KEY not set" >&2
              exit 1
            fi
            echo "sports.json missing; fetching once..."
            curl -sS "https://api.the-odds-api.com/v4/sports?apiKey=${API_KEY}" \
              -o data/sports.json
          fi

      - name: Resolve greyhound SPORT_KEY from sports.json (or use override)
        id: sportkey
        env:
          SPORT_KEY_OVERRIDE: ${{ secrets.SPORT_KEY_OVERRIDE }}
        run: |
          set -euo pipefail
          if [ -n "${SPORT_KEY_OVERRIDE:-}" ]; then
            echo "Using override key: ${SPORT_KEY_OVERRIDE}"
            echo "SPORT_KEY=${SPORT_KEY_OVERRIDE}" >> $GITHUB_ENV
            exit 0
          fi
          python - <<'PY'
import json, sys, os
with open("data/sports.json") as f:
    sports=json.load(f)

# Try matching by title/group first, then key contains
candidates=[]
for s in sports:
    t=(s.get("title") or "").lower()
    g=(s.get("group") or "").lower()
    k=(s.get("key")   or "").lower()
    if "greyhound" in t or "greyhound" in g or "greyhound" in k:
        candidates.append(s)

if not candidates:
    print("No greyhound sport found in sports.json", file=sys.stderr)
    sys.exit(2)

# Pick first; print for logs
chosen=candidates[0]
print("Resolved greyhound sport:", chosen)
# Export to GITHUB_ENV
print(f"SPORT_KEY={chosen['key']}")
PY
        shell: bash
      - name: Export SPORT_KEY
        run: echo "SPORT_KEY=$(tail -n1 $GITHUB_STEP_SUMMARY || true)" >> $GITHUB_ENV
        if: ${{ always() && false }}  # (no-op; SPORT_KEY already exported in Python step)

      - name: Fetch odds (Odds API)
        env:
          API_KEY: ${{ secrets.ODDS_API_KEY }}
          SPORT_KEY: ${{ env.SPORT_KEY }}
        run: |
          set -euo pipefail
          if [ -z "${API_KEY:-}" ]; then
            echo "ODDS_API_KEY secret is missing." >&2
            exit 1
          fi
          if [ -z "${SPORT_KEY:-}" ]; then
            echo "SPORT_KEY is empty; cannot query odds." >&2
            exit 1
          fi
          mkdir -p data/odds
          URL="https://api.the-odds-api.com/v4/sports/${SPORT_KEY}/odds?apiKey=${API_KEY}&regions=au&markets=h2h&oddsFormat=decimal&dateFormat=iso"
          echo "[info] Requesting: ${URL//${API_KEY}/***}"  # mask key
          curl -sS "$URL" -o data/odds/odds.json

          # Quick validation
          python - <<'PY'
import json, sys
with open("data/odds/odds.json") as f:
    data=f.read().strip()
if not data or data.startswith("<"):
    print("Odds response looks wrong (empty/HTML).", file=sys.stderr)
    sys.exit(2)
try:
    j=json.loads(data)
except Exception as e:
    print("Odds not JSON:", e, file=sys.stderr); sys.exit(2)
print("Odds entries:", len(j) if isinstance(j, list) else "not-a-list")
PY

      - name: Make bets (produce bets.csv)
        run: |
          set -e
          python src/make_bets.py || python - <<'PY'
# Fallback: write a placeholder bets.csv so the pipeline completes
import pandas as pd, pathlib, datetime as dt
p=pathlib.Path("data/bets.csv")
p.parent.mkdir(parents=True, exist_ok=True)
df=pd.DataFrame([{"timestamp":dt.datetime.utcnow().isoformat()+"Z","note":"no make_bets.py yet"}])
df.to_csv(p, index=False)
print("Wrote", p)
PY

      - name: Upload bets artifact
        uses: actions/upload-artifact@v4
        with:
          name: bets
          path: data/bets.csv
          if-no-files-found: error

      - name: Commit bets.csv back to repo (optional)
        run: |
          set -e
          git config --local user.name  "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data/bets.csv || true
          git commit -m "chore: update bets.csv" || echo "No bets.csv changes to commit"
          git push || echo "Push skipped"
